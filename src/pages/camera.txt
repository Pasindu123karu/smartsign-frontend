import { useState, useEffect, useRef } from "react";
import { ArrowLeft, Zap, RefreshCw } from "lucide-react";
import { Button } from "@/components/ui/button";
import { useNavigate } from "react-router-dom";
import { toast } from "sonner";
import * as tf from "@tensorflow/tfjs";
import * as handpose from "@tensorflow-models/handpose";

// Dummy letters/words list
const practiceLetters = ["A", "B", "C", "D", "E"];

const Camera = () => {
  const navigate = useNavigate();
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [currentIndex, setCurrentIndex] = useState(0);
  const [detectedSign, setDetectedSign] = useState<string | null>(null);
  const [modelLoaded, setModelLoaded] = useState(false);

  const videoRef = useRef<HTMLVideoElement>(null);
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const modelRef = useRef<handpose.HandPose | null>(null);

  const targetLetter = practiceLetters[currentIndex];

  // Load camera + handpose model
  useEffect(() => {
    const loadModel = async () => {
      try {
        const stream = await navigator.mediaDevices.getUserMedia({ video: true });
        if (videoRef.current) {
          videoRef.current.srcObject = stream;
        }
        modelRef.current = await handpose.load();
        setModelLoaded(true);
        toast.success("ü§ñ Handpose model loaded!");
      } catch (err) {
        console.error(err);
        toast.error("Failed to access camera or load model.");
      }
    };
    loadModel();
  }, []);

  // Run detection
  const handleAnalyze = async () => {
    if (!modelRef.current || !videoRef.current) return;
    setIsAnalyzing(true);
    toast.info("Analyzing your sign...");

    const predictions = await modelRef.current.estimateHands(videoRef.current);

    setIsAnalyzing(false);

    if (predictions.length > 0) {
      // For now, just say "Hand detected"
      const recognized = "Hand"; // TODO: replace with gesture classification
      setDetectedSign(recognized);

      if (recognized === targetLetter) {
        toast.success(`‚úÖ Correct! You signed '${targetLetter}'!`);
        setTimeout(() => {
          setCurrentIndex((prev) => (prev + 1) % practiceLetters.length);
          setDetectedSign(null);
        }, 2000);
      } else {
        toast.error(`‚ùå Oops! I detected '${recognized}'. Try again!`);
      }
    } else {
      toast.error("No hands detected. Try again!");
    }
  };

  return (
    <div className="min-h-screen bg-gradient-bg relative overflow-hidden">
      {/* Header */}
      <div className="flex items-center justify-between p-6 relative z-10">
        <Button
          variant="outline"
          size="icon"
          onClick={() => navigate("/home")}
          className="rounded-full bg-white/20 backdrop-blur-sm border-white/30 text-foreground hover:bg-white/30"
        >
          <ArrowLeft className="h-5 w-5" />
        </Button>
        <h1 className="text-2xl font-bold text-foreground">AI Sign Recognition</h1>
        <div className="w-10 h-10" />
      </div>

      {/* Target Letter */}
      <div className="text-center px-6 mb-4">
        <div className="mx-auto mb-4 flex h-28 w-28 items-center justify-center rounded-full bg-gradient-primary shadow-float">
          <div className="text-5xl">{targetLetter}</div>
        </div>
        <h2 className="text-2xl font-bold text-foreground mb-2">
          Show me <span className="text-accent">{targetLetter}</span>
        </h2>
        <p className="text-muted-foreground text-base">
          Position your hands in the camera view and press recognize.
        </p>
      </div>

      {/* Camera Feed */}
      <div className="mx-6 mb-6 relative">
        <video
          ref={videoRef}
          autoPlay
          playsInline
          muted
          className="w-full rounded-3xl border-4 border-white/30"
        />
        <canvas
          ref={canvasRef}
          className="absolute top-0 left-0 w-full h-full pointer-events-none"
        />
        {isAnalyzing && (
          <div className="absolute inset-0 flex items-center justify-center bg-black/40">
            <RefreshCw className="h-12 w-12 text-white animate-spin" />
          </div>
        )}
      </div>

      {/* Action Button */}
      <div className="px-6 space-y-3">
        <Button
          onClick={handleAnalyze}
          disabled={isAnalyzing || !modelLoaded}
          className="w-full bg-gradient-success text-white text-lg font-bold py-4 rounded-2xl shadow-float hover:scale-105 transition-all duration-300 disabled:opacity-70"
        >
          <Zap className="h-5 w-5 mr-2" />
          {isAnalyzing ? "Analyzing..." : "Recognize My Sign!"}
        </Button>

        {detectedSign && (
          <p className="text-center text-lg text-foreground font-semibold">
            I saw: <span className="text-accent">{detectedSign}</span>
          </p>
        )}
      </div>
    </div>
  );
};

export default Camera;
